#include<bits/stdc++.h>
#define pii pair<int,int>
#define ff first
#define ss second


using namespace std;
vector<int> g[100001],node_id;
int deph[100001],first_visit[100001],log_2[300001];
pii st[300001][20];
void DFS(int v,int e=-1){
    deph[v]=(e!=-1) ? deph[e]+1 : 1;
    first_visit[v]=node_id.size();
    node_id.push_back(v);
    for(int u : g[v]){
        if(u!=e){
            DFS(u,v);
            node_id.push_back(v);
        }
    }
}
void preper(int n,int root){
    DFS(root);
    int m=node_id.size();
    for(int j=0;j<20;j++)
        for(int i=0;i<m;i++){
            int u=node_id[i];
            if(j==0)
                st[i][j]={deph[u],u};
            else
                if(i+(1<<(j-1))<m)
                    st[i][j]=min(st[i][j-1],st[i+(1<<(j-1))][j-1]);
        }

    int cnt=-1,last=1;
    for(int i=1;i<=m;i++){
        if(i==last)
            last*=2,cnt++;
        log_2[i]=cnt;
    }
}
int LCA(int v,int u){
    int a=first_visit[v],b=first_visit[u];
    if(b>a)
        swap(b,a);
    int t=log_2[a-b+1];
    return min(st[b][t],st[a-(1<<t)+1][t]).ss;
}
int main(){
    int n;
    cin >> n;
    for(int i=1;i<n;i++){
        int v,u;
        cin >> v >> u;
        g[v].push_back(u);
        g[u].push_back(v);
    }
    preper(n,1);
    int Q;
    cin >> Q;
    while(Q--){
        int v,u;
        cin >> v >> u;
        cout << LCA(v,u) << endl;
    }
}
