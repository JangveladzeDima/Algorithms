#include <bits/stdc++.h>

using namespace std;

int parent[100001],sz[100001];

struct Edge{
    int x,y,w;
};

bool operator < (Edge a,Edge b){

    if(a.w==b.w){
        if(a.x==b.x)
            return (a.y<b.y);
        return (a.x<b.x);
    }
    return (a.w<b.w);
}

Edge mp(int a,int b,int c){
    Edge A;
    A.x=a;
    A.y=b;
    A.w=c;
    return A;
}

void make_set(int v){
    parent[v]=v;
    sz[v]=1;
}

int find_set(int v){
    if(v==parent[v])
        return v;
    return parent[v]=find_set(parent[v]);
}

void union_set(int a,int b){
    a=find_set(a);
    b=find_set(b);
    if(sz[a]<sz[b])
        swap(a,b);
    parent[b]=a;
    sz[a]+=sz[b];
}

int edge[1001][1001];

int main(){
    vector<Edge> s;
    int n,m;
    cin >> n >> m;
    for(int i=1;i<=m;i++){
        int a,b,cost;
        cin >> a >> b >> cost;
        edge[a][b]=i;
        s.push_back(mp(a,b,cost));
    }
    for(int i=1;i<=n;i++)
        make_set(i);
    int val=0;
    sort(s.begin(),s.end());
    vector<Edge> ans;
    for(Edge u : s){
        if(find_set(u.x)!=find_set(u.y)){
                val+=u.w;
                union_set(u.x,u.y);
                ans.push_back(u);
        }
    }
    cout << val << endl;
    for(Edge u: ans){
        cout << edge[u.x][u.y] << " " ;
    }
}
